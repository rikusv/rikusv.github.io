---
layout: post
title:  "MongoDB"
categories: [code, notes]
---

[MongoDB](https://www.mongodb.com/) is a NoSQL database. [Documents](https://docs.mongodb.com/manual/core/document/) are stored in [Collections](https://docs.mongodb.com/manual/core/databases-and-collections/).

# Cloud options

[MongoDB Atlas](https://www.mongodb.com/cloud/atlas) includes a free tier, else charged hourly, and can run on AWS, Azure, and GCP.

[mLab](https://mlab.com/) includes a free tier, else charged monthly, and can run on AWS, Azure, and GCP.

# Security

[Authentication](https://docs.mongodb.com/manual/core/authentication) - default is [SCRAM](https://en.wikipedia.org/wiki/Salted_Challenge_Response_Authentication_Mechanism).

[Authorization](https://docs.mongodb.com/manual/core/authorization/) - role based access control. See [tutorial](https://docs.mongodb.com/manual/tutorial/manage-users-and-roles/). Finest granularity is `action` on `collection` level (e.g. privilege to execute `find` action on `plants` collection), so document based access control would need to be at the backend server level. However, [Views](https://docs.mongodb.com/manual/core/views/index.html) can be used to limit field level access (i.e. user can read any document in collection, but only see some of the document fields).

# Install MongoDB

> See [Install MongoDB](https://docs.mongodb.com/manual/installation/) for general instructions.

On MacOS with Homebrew (see [Install MongoDB Community Edition on macOS](https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/)):

```
brew update
brew install mongodb
```

# Run MongoDB

Run the database using `mongod`, specifying options either using [command line options ](https://docs.mongodb.com/manual/reference/program/mongod/#core-options) or a [configuration file](https://docs.mongodb.com/manual/reference/configuration-options/).

Stop `mongod` using **Control+C**.

### Specifying the database path as a command line option

```
cd some-project
mkdir -p data/db
mongod --dbpath data/db
```

The process output should include:

> `[initandlisten] waiting for connections on port 27017`

### Specifying a configuration file

```
cd some-project
mkdir -p data/db data/log
mongod --config data/mongod.conf
```

The configuration file `some-project/mongo.conf` could look something like this:

```
systemLog:
  destination: file
  path: data/log/mongo.log
  logAppend: true
storage:
  dbPath: data/db
net:
  bindIp: 127.0.0.1
```

The log `some-project/data/log/mongo.log` should include:

> `[initandlisten] waiting for connections on port 27017`

# Use MongoDB

The database can be used from the command line via the interactive JavaScript [`mongo` shell](https://docs.mongodb.com/manual/mongo/) (included with MongoDB installation above), or using various [drivers](https://docs.mongodb.com/ecosystem/drivers/).

Below are some basics of using PyMongo (`pymongo`) for Python, and `mongodb` for Node.js, and the `mongo` shell.

## Using PyMongo

See [separate notes]({% post_url 2018-09-21-mongodb-with-python %}).

## Using Node.js

See [separate notes]({% post_url 2018-09-21-mongodb-with-node-js %}).

## Using the `mongo` shell

See [MongoDB CRUD Operations](https://docs.mongodb.com/manual/crud/)).

Start the [`mongo` shell](https://docs.mongodb.com/manual/reference/program/mongo/#bin.mongo):

```
mongo --host 127.0.0.1:27017
```

Insert a document:

```
db.plants.insertOne({
  type: "tomato",
  variety: "Carbon",
  rating: 9
})
```

    {
    	"acknowledged" : true,
    	"insertedId" : ObjectId("5ba4c27308643640403cc1cf")
    }

Insert many documents:

```
db.plants.insertMany([
  {
    type: "chilli",
    variety: "Aji Limo",
    rating: 10
  },
  {
    type: "chilli",
    variety: "Chocolate Habanero",
    rating: 10
  },
  {
    type: "chilli",
    variety: "Cascabel",
    rating: 6
  }
])
```

    {
    	"acknowledged" : true,
    	"insertedIds" : [
    		ObjectId("5ba4c29508643640403cc1d0"),
    		ObjectId("5ba4c29508643640403cc1d1"),
    		ObjectId("5ba4c29508643640403cc1d2")
    	]
    }

Update many documents:

```
db.plants.updateMany(
  {
    type: {
      $in: [ "chilli", "tomato" ]
    }
  },
  {
    $set: {
      family: "Solanaceae"
    }
  }
)
```

    { "acknowledged" : true, "matchedCount" : 4, "modifiedCount" : 4 }

Find documents:

```
db.plants.find({
  rating: {
    $gt: 8
  }
})
```

    { "_id" : ObjectId("5ba4c27308643640403cc1cf"), "type" : "tomato", "variety" : "Carbon", "rating" : 9, "family" : "Solanaceae" }
    { "_id" : ObjectId("5ba4c29508643640403cc1d0"), "type" : "chilli", "variety" : "Aji Limo", "rating" : 10, "family" : "Solanaceae" }
    { "_id" : ObjectId("5ba4c29508643640403cc1d1"), "type" : "chilli", "variety" : "Chocolate Habanero", "rating" : 10, "family" : "Solanaceae" }

Delete documents:

```
db.plants.deleteMany({
  rating: {
    $lt: 8
  }
})
```

    { "acknowledged" : true, "deletedCount" : 1 }
